#!/usr/bin/env python3

"""
klog - Binary Kitchen's log tool

Copyright (c) Binary Kitchen e.V., 2018

Author:
  Ralf Ramsauer <ralf@binary-kitchen.de>

This work is licensed under the terms of the GNU GPL, version 2.  See
the LICENSE file in the top-level directory.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.
"""

import argparse
import datetime
import os
import subprocess
import smtplib
import tempfile
import termios
import tty
import sys
import time

try:
    import easygui
    has_gui = True
except ImportError:
    has_gui = False

from locale import setlocale, LC_ALL

from pyklog.KitchenLog import KitchenLog, Config
from pyklog.LogEntry import parse_ymd, format_ymd

f_config = os.path.join(os.environ['HOME'], '.config', 'klogrc')
editor = os.environ.get('EDITOR', 'nano')
default_config_template = """[klog]
# Please don't touch those lines unless you know what you're doing.
cache = ~/.cache/klog/
kitchenlog = git@github.com:Binary-Kitchen/kitchenlog.git
# Choose this if you don't use SSH keys (trust me, you should...)
# kitchenlog = https://github.com/Binary-Kitchen/kitchenlog.git
update_trigger = https://wiki.vmexit.de/wiki/update.php

# The following variables are only required for email handler of klog
# smtp_server = localhost
# email_name = klog bot <kitchenlog@vmexit.de>
"""


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def edit(message):
    with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
        tf.write(message.encode('utf-8'))
        tf.flush()
        subprocess.call([editor, tf.name])
        tf.seek(0)
        return tf.read().decode('utf-8')


def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def check_date(value):
    date = parse_ymd(value)
    if not date:
        raise argparse.ArgumentError('%s is not a valid date' % value)
    return date


def prompt(allowed, default):
    sys.stdout.write('> ')
    sys.stdout.flush()
    while True:
        char = getch()
        if char == '\r':
            ret = default
            break
        if char in allowed or char == default:
            ret = char
            break
    print(ret)
    return ret


def prompt_yn(default='n'):
    return prompt(['y', 'n'], default)


def interactive_edit(klog):
    entries = klog.get(args.date)
    if len(entries) == 0:
        target_entry = klog.new_entry(args.date)
    else:
        print('Found %d entries for %s. Choose wisely.' % (len(entries), format_ymd(args.date)))
        for no, entry in enumerate(entries):
            print('  %d: %s' % (no, entry.shortlog))
        print('  n: (n)ew entry')
        print('  x: e(x)it')
        choice = prompt([str(x) for x in range(0, len(entries))] + ['n'], 'x')
        if choice == 'x':
            return False
        elif choice == 'n':
            target_entry = klog.new_entry(args.date)
        else:
            target_entry = entries[int(choice)]

    new = str(target_entry)
    retry = True
    while retry:
        try:
            new = edit(new)
            if not new:
                print('Delete entry? y/N')
                if prompt_yn() == 'y':
                    target_entry.remove()
            else:
                target_entry.reload(new, True)

                if has_gui:
                    print('Any media/attachments updates, sir? y/N')
                    if prompt_yn() == 'y':
                        print('Press n for new attachments, and the number to delete?')
                        while True:
                            for no, media in enumerate(target_entry.media):
                                print('  %d: %s' % (no, media))
                            print('  n: (n)ew')
                            print('  x: e(x)it')
                            choice = prompt([str(x) for x in range(0, len(target_entry.media))] + ['n'], 'x')
                            if choice != 'x' and choice != 'n':
                                choice = int(choice)
                                target_entry.remove_media(choice)
                            elif choice == 'n':
                                media = easygui.fileopenbox()
                                if not media or not os.path.isfile(media):
                                    print('not a valid file')
                                else:
                                    target_entry.attach_media_by_file(media)
                            elif choice == 'x':
                                break
            retry = False
        except ValueError as e:
            print(str(e))
            print('Failed. Retry? y/N')
            if prompt_yn() != 'y':
                return False
            new = '# %s\n' % str(e) + new

    print('Commit? Y/n')
    if prompt_yn('y') == 'n':
        return False
    return True


setlocale(LC_ALL, 'de_DE.UTF-8')

parser = argparse.ArgumentParser(description='klog - Binary Kitchen log cmdline tool.')
parser.add_argument('date', type=check_date, default=format_ymd(datetime.date.today()), nargs='?',
                    help='date in Y-M-D, default: today')
parser.add_argument('-n', '--no-sync', action='store_true', default=False, help="Don't sync repository")
parser.add_argument('-e', '--from-email', type=str, default=None, help="Mail receiver")
args = parser.parse_args()

# Create config if !exists
if not os.path.isfile(f_config):
    print('First klog start. Creating and editing config...')
    time.sleep(2)
    config = edit(default_config_template)
    os.makedirs(os.path.split(f_config)[0], exist_ok=True)
    with open(f_config, 'w') as f:
        f.write(config)
    print('File saved as %s' % f_config)

cfg = Config(f_config, args.from_email, not args.no_sync)
klog = KitchenLog(cfg.repo)

update_repo = False

if args.from_email:
    mail = open(args.from_email, 'rb').read()
    update_repo, response = klog.handle_email(cfg.email_name, mail)
    s = smtplib.SMTP('localhost')
    s.send_message(response)
    s.quit()
else:
    update_repo = interactive_edit(klog)

if update_repo:
    klog.commit('Modified %s' % format_ymd(args.date), args.no_sync)
    cfg.update_trigger()
